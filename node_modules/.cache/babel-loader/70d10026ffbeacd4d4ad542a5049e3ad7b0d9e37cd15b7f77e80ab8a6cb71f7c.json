{"ast":null,"code":"var _jsxFileName = \"/Users/pika/react-ecoboard/src/Components/SensorChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { SimulateRealTimeData } from './SimulateRealTimeData.tsx';\n\n// Define the type for our sensor data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend); //ensure to register for rendering\n\nexport default function SensorChart() {\n  _s();\n  // State to track which charts are visible, used for \n  const [filters, setFilters] = useState({\n    temperature: true,\n    humidity: true,\n    airQuality: true\n  });\n  const formatTime = (date = new Date()) => {\n    return date.toLocaleTimeString('en-US', {\n      hour12: false,\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n  const [chartData, setChartData] = useState({\n    //this is the data that is displayed on the chart\n    labels: Array(10).fill('').map(() => formatTime()),\n    datasets: [{\n      label: 'Temperature (Â°C)',\n      data: [],\n      borderColor: 'rgb(255, 99, 132)',\n      // Dark blue color\n      tension: 0.1\n    }, {\n      label: 'Humidity (%)',\n      data: [],\n      borderColor: 'rgb(255, 255, 255)',\n      tension: 0.1\n    }, {\n      label: 'Air Quality (AQI)',\n      data: [],\n      borderColor: 'rgb(53, 162, 235)',\n      tension: 0.1\n    }]\n  });\n\n  // Callback to handle updates from the simulator\n  const handleDataUpdate = useCallback(updates => {\n    // Update chart data with the latest readings\n    if (updates.length > 0) {\n      const latest = updates[updates.length - 1];\n      const now = new Date();\n      setChartData(prev => {\n        // Add new time to labels, keeping only last 10 entries\n        const newLabels = [...prev.labels.slice(1), formatTime(now)];\n        return {\n          ...prev,\n          labels: newLabels,\n          datasets: [{\n            ...prev.datasets[0],\n            data: [...prev.datasets[0].data.slice(-10), latest.temperature] //slice removed that last entry and keeps the most recent 10\n          }, {\n            ...prev.datasets[1],\n            data: [...prev.datasets[1].data.slice(-10), latest.humidity]\n          }, {\n            ...prev.datasets[2],\n            data: [...prev.datasets[2].data.slice(-10), latest.airQuality]\n          }]\n        };\n      });\n    }\n  }, []);\n\n  // Set up the data simulation when component mounts\n  useEffect(() => {\n    // Start simulation with 1 sensor, updating every 2 seconds\n    const cleanup = SimulateRealTimeData(1, 1000, handleDataUpdate);\n\n    // Clean up interval on unmount\n    return () => {\n      cleanup && cleanup();\n    };\n  }, [handleDataUpdate]);\n\n  //chart options for customizing the chart\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: {\n      duration: 1000\n    },\n    plugins: {\n      legend: {\n        labels: {\n          color: '#e2e8f0',\n          font: {\n            size: 14,\n            weight: 'normal' // Using 'normal' which is a valid font weight\n          },\n          padding: 20,\n          usePointStyle: true,\n          pointStyle: 'circle',\n          boxWidth: 8\n        }\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          color: 'rgba(255, 255, 255, 0.1)'\n        },\n        ticks: {\n          color: '#94a3b8',\n          font: {\n            size: 12\n          }\n        }\n      },\n      y: {\n        beginAtZero: false,\n        grid: {\n          color: 'rgba(255, 255, 255, 0.1)'\n        },\n        ticks: {\n          color: '#94a3b8',\n          font: {\n            size: 12\n          }\n        }\n      }\n    }\n  };\n\n  // Filter the chart data based on active filters\n  const filteredChartData = {\n    ...chartData,\n    datasets: chartData.datasets.filter(dataset => {\n      //filters out the datasets that are not selected\n      if (dataset.label.includes('Temperature') && !filters.temperature) return false;\n      if (dataset.label.includes('Humidity') && !filters.humidity) return false;\n      if (dataset.label.includes('Air Quality') && !filters.airQuality) return false;\n      return true;\n    })\n  };\n\n  // Handle filter toggle\n  const handleFilterChange = filterName => {\n    setFilters(prev => ({\n      ...prev,\n      [filterName]: !prev[filterName]\n    }));\n  };\n  return (\n    /*#__PURE__*/\n    //renders the chart with the toggles and the chart\n    _jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: \"white\"\n        },\n        children: \"Real-time Sensor Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-filters\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"checkbox-wrapper-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"temperature-toggle\",\n              checked: filters.temperature,\n              onChange: () => handleFilterChange('temperature')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"temperature-toggle\",\n              className: \"toggle\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"filter-label\",\n            children: \"Temperature\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"checkbox-wrapper-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"humidity-toggle\",\n              checked: filters.humidity,\n              onChange: () => handleFilterChange('humidity')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"humidity-toggle\",\n              className: \"toggle\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"filter-label\",\n            children: \"Humidity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"checkbox-wrapper-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"airquality-toggle\",\n              checked: filters.airQuality,\n              onChange: () => handleFilterChange('airQuality')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"airquality-toggle\",\n              className: \"toggle\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"filter-label\",\n            children: \"Air Quality\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: filteredChartData,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(SensorChart, \"AsJyAOaKW6kmP1oQZWMH5/j9jUM=\");\n_c = SensorChart;\nvar _c;\n$RefreshReg$(_c, \"SensorChart\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","SimulateRealTimeData","jsxDEV","_jsxDEV","register","SensorChart","_s","filters","setFilters","temperature","humidity","airQuality","formatTime","date","Date","toLocaleTimeString","hour12","hour","minute","second","chartData","setChartData","labels","Array","fill","map","datasets","label","data","borderColor","tension","handleDataUpdate","updates","length","latest","now","prev","newLabels","slice","cleanup","options","responsive","maintainAspectRatio","animation","duration","plugins","legend","color","font","size","weight","padding","usePointStyle","pointStyle","boxWidth","scales","x","grid","ticks","y","beginAtZero","filteredChartData","filter","dataset","includes","handleFilterChange","filterName","className","children","style","fileName","_jsxFileName","lineNumber","columnNumber","type","id","checked","onChange","htmlFor","_c","$RefreshReg$"],"sources":["/Users/pika/react-ecoboard/src/Components/SensorChart.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { SimulateRealTimeData } from './SimulateRealTimeData.tsx';\n\n// Define the type for our sensor data\ninterface SensorData {\n  sensorId: string;\n  timestamp: string;\n  airQuality: number;\n  temperature: number;\n  humidity: number;\n}\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);  //ensure to register for rendering\n\nexport default function SensorChart() {\n    // State to track which charts are visible, used for \n    const [filters, setFilters] = useState({\n        temperature: true,\n        humidity: true,\n        airQuality: true\n    });\n\n    const formatTime = (date = new Date()) => {\n      return date.toLocaleTimeString('en-US', {\n        hour12: false,\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    };\n\n    const [chartData, setChartData] = useState({  //this is the data that is displayed on the chart\n      labels: Array(10).fill('').map(() => formatTime()),\n      datasets: [\n        {\n          label: 'Temperature (Â°C)',\n          data: [],\n          borderColor: 'rgb(255, 99, 132)', // Dark blue color\n          tension: 0.1\n        },\n        {\n          label: 'Humidity (%)',\n          data: [],\n          borderColor: 'rgb(255, 255, 255)',\n          tension: 0.1\n        },\n        {\n          label: 'Air Quality (AQI)',\n          data: [],\n          borderColor: 'rgb(53, 162, 235)',\n          tension: 0.1\n        }\n      ]\n    });\n\n    // Callback to handle updates from the simulator\n    const handleDataUpdate = useCallback((updates: SensorData[]) => {\n      // Update chart data with the latest readings\n      if (updates.length > 0) {\n        const latest = updates[updates.length - 1];\n        const now = new Date();\n        \n        setChartData(prev => {\n          // Add new time to labels, keeping only last 10 entries\n          const newLabels = [...prev.labels.slice(1), formatTime(now)];\n          \n          return {\n            ...prev,\n            labels: newLabels,\n            datasets: [\n              {\n                ...prev.datasets[0],\n                data: [...prev.datasets[0].data.slice(-10), latest.temperature]  //slice removed that last entry and keeps the most recent 10\n              },\n              {\n                ...prev.datasets[1],\n                data: [...prev.datasets[1].data.slice(-10), latest.humidity]\n              },\n              {\n                ...prev.datasets[2],\n                data: [...prev.datasets[2].data.slice(-10), latest.airQuality]\n              }\n            ]\n          };\n        });\n      }\n    }, []);\n\n    // Set up the data simulation when component mounts\n    useEffect(() => {\n      // Start simulation with 1 sensor, updating every 2 seconds\n      const cleanup = SimulateRealTimeData(1, 1000, handleDataUpdate);\n      \n      // Clean up interval on unmount\n      return () => {\n        cleanup && cleanup();\n      };\n    }, [handleDataUpdate]);\n\n    //chart options for customizing the chart\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      animation: {\n        duration: 1000\n      },\n      plugins: {\n        legend: {\n          labels: {\n            color: '#e2e8f0',\n            font: {\n              size: 14,\n              weight: 'normal' as const, // Using 'normal' which is a valid font weight\n            },\n            padding: 20,\n            usePointStyle: true,\n            pointStyle: 'circle',\n            boxWidth: 8,\n          }\n        }\n      },\n      scales: {\n        x: {\n          grid: {\n            color: 'rgba(255, 255, 255, 0.1)'\n          },\n          ticks: {\n            color: '#94a3b8',\n            font: {\n              size: 12\n            }\n          }\n        },\n        y: {\n          beginAtZero: false,\n          grid: {\n            color: 'rgba(255, 255, 255, 0.1)'\n          },\n          ticks: {\n            color: '#94a3b8',\n            font: {\n              size: 12\n            }\n          }\n        }\n      }\n    };\n\n    // Filter the chart data based on active filters\n    const filteredChartData = {\n        ...chartData,\n        datasets: chartData.datasets.filter(dataset => {\n          //filters out the datasets that are not selected\n            if (dataset.label.includes('Temperature') && !filters.temperature) return false;\n            if (dataset.label.includes('Humidity') && !filters.humidity) return false;\n            if (dataset.label.includes('Air Quality') && !filters.airQuality) return false;\n            return true;\n        })\n    };\n\n    // Handle filter toggle\n    const handleFilterChange = (filterName) => {\n        setFilters(prev => ({\n            ...prev,\n            [filterName]: !prev[filterName]\n        }));\n    };\n\n    return (  //renders the chart with the toggles and the chart\n        <div className=\"chart-container\">\n            <h1 style={{ color: \"white\" }}>Real-time Sensor Data</h1>\n            <div className=\"chart-filters\">\n                <div className=\"filter-item\">\n                    <div className=\"checkbox-wrapper-3\">\n                        <input \n                            type=\"checkbox\" \n                            id=\"temperature-toggle\" \n                            checked={filters.temperature}\n                            onChange={() => handleFilterChange('temperature')}\n                        />\n                        <label htmlFor=\"temperature-toggle\" className=\"toggle\">\n                            <span></span>\n                        </label>\n                    </div>\n                    <span className=\"filter-label\">Temperature</span>\n                </div>\n                <div className=\"filter-item\">\n                    <div className=\"checkbox-wrapper-3\">\n                        <input \n                            type=\"checkbox\" \n                            id=\"humidity-toggle\"\n                            checked={filters.humidity}\n                            onChange={() => handleFilterChange('humidity')}\n                        />\n                        <label htmlFor=\"humidity-toggle\" className=\"toggle\">\n                            <span></span>\n                        </label>\n                    </div>\n                    <span className=\"filter-label\">Humidity</span>\n                </div>\n                <div className=\"filter-item\">\n                    <div className=\"checkbox-wrapper-3\">\n                        <input \n                            type=\"checkbox\" \n                            id=\"airquality-toggle\"\n                            checked={filters.airQuality}\n                            onChange={() => handleFilterChange('airQuality')}\n                        />\n                        <label htmlFor=\"airquality-toggle\" className=\"toggle\">\n                            <span></span>\n                        </label>\n                    </div>\n                    <span className=\"filter-label\">Air Quality</span>\n                </div>\n            </div>\n            <div className=\"chart-wrapper\">\n                <Line data={filteredChartData} options={options} />\n            </div>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}