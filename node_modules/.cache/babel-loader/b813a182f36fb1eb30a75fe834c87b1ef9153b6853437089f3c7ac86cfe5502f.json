{"ast":null,"code":"var _jsxFileName = \"/Users/pika/react-ecoboard/src/Components/SensorChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { SimulateRealTimeData } from './SimulateRealTimeData.tsx';\n\n// Define the type for our sensor data\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Chart configuration\nconst CHART_CONFIG = {\n  width: 800,\n  height: 400,\n  margin: {\n    top: 20,\n    right: 30,\n    bottom: 40,\n    left: 50\n  },\n  colors: {\n    temperature: '#ff6384',\n    humidity: '#36a2eb',\n    airQuality: '#4bc0c0',\n    grid: '#e0e0e0',\n    text: '#333'\n  }\n};\nexport default function SensorChart() {\n  _s();\n  var _data$, _data;\n  const [data, setData] = useState([]);\n  const [filters, setFilters] = useState({\n    temperature: true,\n    humidity: true,\n    airQuality: true\n  });\n  const chartRef = useRef(null);\n  const [dimensions, setDimensions] = useState({\n    width: CHART_CONFIG.width,\n    height: CHART_CONFIG.height\n  });\n\n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      if (chartRef.current) {\n        const width = Math.min(window.innerWidth - 40, CHART_CONFIG.width);\n        setDimensions({\n          width,\n          height: CHART_CONFIG.height * (width / CHART_CONFIG.width)\n        });\n      }\n    };\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  const formatTime = (date = new Date()) => {\n    return date.toLocaleTimeString('en-US', {\n      hour12: false,\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n\n  // Process data for the chart\n  const processData = useCallback(newData => {\n    setData(prev => {\n      const updated = [...prev, newData].slice(-30); // Keep last 30 data points\n      return updated;\n    });\n  }, []);\n\n  // Generate path data for a line\n  const generatePath = points => {\n    if (points.length < 2) return '';\n    let path = `M ${points[0].x},${points[0].y}`;\n    for (let i = 1; i < points.length; i++) {\n      const x = points[i].x;\n      const y = points[i].y;\n      path += ` L ${x},${y}`;\n    }\n    return path;\n  };\n\n  // Calculate chart dimensions\n  const chartWidth = dimensions.width - CHART_CONFIG.margin.left - CHART_CONFIG.margin.right;\n  const chartHeight = dimensions.height - CHART_CONFIG.margin.top - CHART_CONFIG.margin.bottom;\n\n  // Calculate scales\n  const xScale = (value, index) => index / Math.max(1, data.length - 1) * chartWidth;\n  const yScale = (value, min, max) => chartHeight - (value - min) / (max - min || 1) * chartHeight;\n\n  // Get min/max values for scaling\n  const getMinMax = key => {\n    if (data.length === 0) return {\n      min: 0,\n      max: 100\n    };\n    const values = data.map(d => d[key]).filter(Number.isFinite);\n    if (values.length === 0) return {\n      min: 0,\n      max: 100\n    };\n    return {\n      min: Math.min(...values, 0),\n      max: Math.max(...values, 100)\n    };\n  };\n\n  // Generate grid lines\n  const generateGridLines = (count, isHorizontal) => {\n    const lines = [];\n    const step = isHorizontal ? chartHeight / count : chartWidth / count;\n    for (let i = 0; i <= count; i++) {\n      const pos = i * step;\n      const lineProps = {\n        stroke: CHART_CONFIG.colors.grid,\n        strokeWidth: 1,\n        strokeDasharray: '2,2',\n        key: `${isHorizontal ? 'h' : 'v'}-line-${i}`\n      };\n      lines.push(isHorizontal ? /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: 0,\n        y1: pos,\n        x2: chartWidth,\n        y2: pos,\n        ...lineProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: pos,\n        y1: 0,\n        x2: pos,\n        y2: chartHeight,\n        ...lineProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this));\n    }\n    return lines;\n  };\n\n  // Generate data points for each metric\n  const getDataPoints = key => {\n    const {\n      min,\n      max\n    } = getMinMax(key);\n    return data.map((d, i) => ({\n      x: xScale(0, i),\n      y: yScale(d[key], min, max)\n    }));\n  };\n\n  // Toggle filter\n  const toggleFilter = key => {\n    setFilters(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }));\n  };\n\n  // Simulate real-time data updates\n  useEffect(() => {\n    const handleNewData = newData => {\n      processData({\n        ...newData,\n        timestamp: formatTime(new Date())\n      });\n    };\n\n    // Start the real-time data simulation with required parameters\n    const cleanup = SimulateRealTimeData(1, 1000, handleNewData);\n\n    // Cleanup function to stop the simulation when the component unmounts\n    return () => {\n      if (cleanup) cleanup();\n    };\n  }, [processData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-gray-800 rounded-lg shadow-lg\",\n    ref: chartRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap gap-4 mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleFilter('temperature'),\n        className: `px-4 py-2 rounded-md ${filters.temperature ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-800'}`,\n        children: \"Temperature\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleFilter('humidity'),\n        className: `px-4 py-2 rounded-md ${filters.humidity ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-800'}`,\n        children: \"Humidity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleFilter('airQuality'),\n        className: `px-4 py-2 rounded-md ${filters.airQuality ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-800'}`,\n        children: \"Air Quality\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative\",\n      style: {\n        width: '100%',\n        height: dimensions.height\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"100%\",\n        height: \"100%\",\n        viewBox: `0 0 ${dimensions.width} ${dimensions.height}`,\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          width: \"100%\",\n          height: \"100%\",\n          fill: \"#1f2937\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          transform: `translate(${CHART_CONFIG.margin.left}, ${CHART_CONFIG.margin.top})`,\n          children: [/*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"grid-lines\",\n            children: [generateGridLines(5, true), generateGridLines(10, false)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: 0,\n            y1: chartHeight,\n            x2: chartWidth,\n            y2: chartHeight,\n            stroke: \"white\",\n            strokeWidth: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: 0,\n            y1: 0,\n            x2: 0,\n            y2: chartHeight,\n            stroke: \"white\",\n            strokeWidth: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), filters.temperature && data.length > 0 && /*#__PURE__*/_jsxDEV(\"path\", {\n            d: generatePath(getDataPoints('temperature')),\n            fill: \"none\",\n            stroke: CHART_CONFIG.colors.temperature,\n            strokeWidth: \"2\",\n            strokeLinejoin: \"round\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }, this), filters.humidity && data.length > 0 && /*#__PURE__*/_jsxDEV(\"path\", {\n            d: generatePath(getDataPoints('humidity')),\n            fill: \"none\",\n            stroke: CHART_CONFIG.colors.humidity,\n            strokeWidth: \"2\",\n            strokeLinejoin: \"round\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this), filters.airQuality && data.length > 0 && /*#__PURE__*/_jsxDEV(\"path\", {\n            d: generatePath(getDataPoints('airQuality')),\n            fill: \"none\",\n            stroke: CHART_CONFIG.colors.airQuality,\n            strokeWidth: \"2\",\n            strokeLinejoin: \"round\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this), filters.temperature && data.map((point, i) => {\n            const points = getDataPoints('temperature');\n            if (!points[i]) return null;\n            return /*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: points[i].x,\n              cy: points[i].y,\n              r: 3,\n              fill: CHART_CONFIG.colors.temperature,\n              stroke: \"white\",\n              strokeWidth: \"1\"\n            }, `temp-${i}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"g\", {\n            transform: `translate(${chartWidth - 150}, 20)`,\n            children: [filters.temperature && /*#__PURE__*/_jsxDEV(\"g\", {\n              children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                x1: 0,\n                y1: 5,\n                x2: 20,\n                y2: 5,\n                stroke: CHART_CONFIG.colors.temperature,\n                strokeWidth: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: 30,\n                y: 9,\n                fill: \"white\",\n                fontSize: \"12\",\n                children: \"Temperature (\\xB0C)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this), filters.humidity && /*#__PURE__*/_jsxDEV(\"g\", {\n              transform: `translate(0, ${filters.temperature ? 20 : 0})`,\n              children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                x1: 0,\n                y1: 5,\n                x2: 20,\n                y2: 5,\n                stroke: CHART_CONFIG.colors.humidity,\n                strokeWidth: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: 30,\n                y: 9,\n                fill: \"white\",\n                fontSize: \"12\",\n                children: \"Humidity (%)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 17\n            }, this), filters.airQuality && /*#__PURE__*/_jsxDEV(\"g\", {\n              transform: `translate(0, ${(filters.temperature ? 20 : 0) + (filters.humidity ? 20 : 0)})`,\n              children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                x1: 0,\n                y1: 5,\n                x2: 20,\n                y2: 5,\n                stroke: CHART_CONFIG.colors.airQuality,\n                strokeWidth: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: 30,\n                y: 9,\n                fill: \"white\",\n                fontSize: \"12\",\n                children: \"Air Quality (AQI)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          transform: `translate(${CHART_CONFIG.margin.left}, ${dimensions.height - CHART_CONFIG.margin.bottom})`,\n          children: [data.length > 0 && /*#__PURE__*/_jsxDEV(\"text\", {\n            x: chartWidth / 2,\n            y: 30,\n            textAnchor: \"middle\",\n            fill: \"white\",\n            fontSize: \"12\",\n            children: \"Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 15\n          }, this), data.length > 4 && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"text\", {\n              x: 0,\n              y: 20,\n              fill: \"white\",\n              fontSize: \"10\",\n              textAnchor: \"start\",\n              children: ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.timestamp) || ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: chartWidth,\n              y: 20,\n              fill: \"white\",\n              fontSize: \"10\",\n              textAnchor: \"end\",\n              children: ((_data = data[data.length - 1]) === null || _data === void 0 ? void 0 : _data.timestamp) || ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          transform: `translate(${CHART_CONFIG.margin.left}, ${CHART_CONFIG.margin.top})`,\n          children: [data.length > 0 && /*#__PURE__*/_jsxDEV(\"text\", {\n            x: -30,\n            y: -10,\n            textAnchor: \"middle\",\n            fill: \"white\",\n            fontSize: \"12\",\n            transform: \"rotate(-90, -30, -10)\",\n            children: \"Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this), [0, 0.25, 0.5, 0.75, 1].map((t, i) => {\n            if (data.length === 0) return null;\n            const tempRange = getMinMax('temperature');\n            const value = Math.round(tempRange.min + (1 - t) * (tempRange.max - tempRange.min));\n            return /*#__PURE__*/_jsxDEV(\"text\", {\n              x: -10,\n              y: t * chartHeight + 3,\n              textAnchor: \"end\",\n              fill: \"white\",\n              fontSize: \"10\",\n              children: value\n            }, `y-label-${i}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n_s(SensorChart, \"LObEYD5wahnH8XhtUNXEGWxa5Ko=\");\n_c = SensorChart;\nvar _c;\n$RefreshReg$(_c, \"SensorChart\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","SimulateRealTimeData","jsxDEV","_jsxDEV","Fragment","_Fragment","CHART_CONFIG","width","height","margin","top","right","bottom","left","colors","temperature","humidity","airQuality","grid","text","SensorChart","_s","_data$","_data","data","setData","filters","setFilters","chartRef","dimensions","setDimensions","handleResize","current","Math","min","window","innerWidth","addEventListener","removeEventListener","formatTime","date","Date","toLocaleTimeString","hour12","hour","minute","second","processData","newData","prev","updated","slice","generatePath","points","length","path","x","y","i","chartWidth","chartHeight","xScale","value","index","max","yScale","getMinMax","key","values","map","d","filter","Number","isFinite","generateGridLines","count","isHorizontal","lines","step","pos","lineProps","stroke","strokeWidth","strokeDasharray","push","x1","y1","x2","y2","fileName","_jsxFileName","lineNumber","columnNumber","getDataPoints","toggleFilter","handleNewData","timestamp","cleanup","className","ref","children","onClick","style","viewBox","fill","transform","strokeLinejoin","strokeLinecap","point","cx","cy","r","fontSize","textAnchor","t","tempRange","round","_c","$RefreshReg$"],"sources":["/Users/pika/react-ecoboard/src/Components/SensorChart.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { SimulateRealTimeData } from './SimulateRealTimeData.tsx';\n\n// Define the type for our sensor data\ninterface SensorData {\n  sensorId: string;\n  timestamp: string;\n  airQuality: number;\n  temperature: number;\n  humidity: number;\n}\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\n// Chart configuration\nconst CHART_CONFIG = {\n  width: 800,\n  height: 400,\n  margin: { top: 20, right: 30, bottom: 40, left: 50 },\n  colors: {\n    temperature: '#ff6384',\n    humidity: '#36a2eb',\n    airQuality: '#4bc0c0',\n    grid: '#e0e0e0',\n    text: '#333'\n  }\n};\n\nexport default function SensorChart() {\n  const [data, setData] = useState<SensorData[]>([]);\n  const [filters, setFilters] = useState({\n    temperature: true,\n    humidity: true,\n    airQuality: true\n  });\n  const chartRef = useRef<HTMLDivElement>(null);\n  const [dimensions, setDimensions] = useState({ width: CHART_CONFIG.width, height: CHART_CONFIG.height });\n\n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      if (chartRef.current) {\n        const width = Math.min(window.innerWidth - 40, CHART_CONFIG.width);\n        setDimensions({\n          width,\n          height: CHART_CONFIG.height * (width / CHART_CONFIG.width)\n        });\n      }\n    };\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const formatTime = (date = new Date()) => {\n    return date.toLocaleTimeString('en-US', {\n      hour12: false,\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n\n  // Process data for the chart\n  const processData = useCallback((newData: SensorData) => {\n    setData(prev => {\n      const updated = [...prev, newData].slice(-30); // Keep last 30 data points\n      return updated;\n    });\n  }, []);\n\n  // Generate path data for a line\n  const generatePath = (points: Point[]) => {\n    if (points.length < 2) return '';\n    \n    let path = `M ${points[0].x},${points[0].y}`;\n    \n    for (let i = 1; i < points.length; i++) {\n      const x = points[i].x;\n      const y = points[i].y;\n      path += ` L ${x},${y}`;\n    }\n    \n    return path;\n  };\n\n  // Calculate chart dimensions\n  const chartWidth = dimensions.width - CHART_CONFIG.margin.left - CHART_CONFIG.margin.right;\n  const chartHeight = dimensions.height - CHART_CONFIG.margin.top - CHART_CONFIG.margin.bottom;\n\n  // Calculate scales\n  const xScale = (value: number, index: number) => \n    (index / Math.max(1, data.length - 1)) * chartWidth;\n    \n  const yScale = (value: number, min: number, max: number) => \n    chartHeight - ((value - min) / (max - min || 1)) * chartHeight;\n\n  // Get min/max values for scaling\n  const getMinMax = (key: 'temperature' | 'humidity' | 'airQuality') => {\n    if (data.length === 0) return { min: 0, max: 100 };\n    const values = data.map(d => d[key]).filter(Number.isFinite) as number[];\n    if (values.length === 0) return { min: 0, max: 100 };\n    return {\n      min: Math.min(...values, 0),\n      max: Math.max(...values, 100)\n    };\n  };\n\n  // Generate grid lines\n  const generateGridLines = (count: number, isHorizontal: boolean): JSX.Element[] => {\n    const lines: JSX.Element[] = [];\n    const step = isHorizontal ? chartHeight / count : chartWidth / count;\n    \n    for (let i = 0; i <= count; i++) {\n      const pos = i * step;\n      const lineProps = {\n        stroke: CHART_CONFIG.colors.grid,\n        strokeWidth: 1,\n        strokeDasharray: '2,2' as const,\n        key: `${isHorizontal ? 'h' : 'v'}-line-${i}`\n      };\n      \n      lines.push(\n        isHorizontal ? (\n          <line\n            x1={0}\n            y1={pos}\n            x2={chartWidth}\n            y2={pos}\n            {...lineProps}\n          />\n        ) : (\n          <line\n            x1={pos}\n            y1={0}\n            x2={pos}\n            y2={chartHeight}\n            {...lineProps}\n          />\n        )\n      );\n    }\n    return lines;\n  };\n\n  // Generate data points for each metric\n  const getDataPoints = (key: 'temperature' | 'humidity' | 'airQuality') => {\n    const { min, max } = getMinMax(key);\n    return data.map((d, i) => ({\n      x: xScale(0, i),\n      y: yScale(d[key] as number, min, max)\n    }));\n  };\n\n  // Toggle filter\n  const toggleFilter = (key: keyof typeof filters) => {\n    setFilters(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }));\n  };\n\n  // Simulate real-time data updates\n  useEffect(() => {\n    const handleNewData = (newData: Omit<SensorData, 'timestamp'>) => {\n      processData({\n        ...newData,\n        timestamp: formatTime(new Date())\n      });\n    };\n\n    // Start the real-time data simulation with required parameters\n    const cleanup = SimulateRealTimeData(1, 1000, handleNewData);\n\n    // Cleanup function to stop the simulation when the component unmounts\n    return () => {\n      if (cleanup) cleanup();\n    };\n  }, [processData]);\n\n  return (\n    <div className=\"p-4 bg-gray-800 rounded-lg shadow-lg\" ref={chartRef}>\n      <div className=\"flex flex-wrap gap-4 mb-4\">\n        <button\n          onClick={() => toggleFilter('temperature')}\n          className={`px-4 py-2 rounded-md ${filters.temperature ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-800'}`}\n        >\n          Temperature\n        </button>\n        <button\n          onClick={() => toggleFilter('humidity')}\n          className={`px-4 py-2 rounded-md ${filters.humidity ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-800'}`}\n        >\n          Humidity\n        </button>\n        <button\n          onClick={() => toggleFilter('airQuality')}\n          className={`px-4 py-2 rounded-md ${filters.airQuality ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-800'}`}\n        >\n          Air Quality\n        </button>\n      </div>\n      \n      <div className=\"relative\" style={{ width: '100%', height: dimensions.height }}>\n        <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${dimensions.width} ${dimensions.height}`}>\n          {/* Background */}\n          <rect width=\"100%\" height=\"100%\" fill=\"#1f2937\" />\n          \n          {/* Chart area */}\n          <g transform={`translate(${CHART_CONFIG.margin.left}, ${CHART_CONFIG.margin.top})`}>\n            {/* Grid lines */}\n            <g className=\"grid-lines\">\n              {generateGridLines(5, true)}\n              {generateGridLines(10, false)}\n            </g>\n            \n            {/* Axes */}\n            <line\n              x1={0}\n              y1={chartHeight}\n              x2={chartWidth}\n              y2={chartHeight}\n              stroke=\"white\"\n              strokeWidth=\"1\"\n            />\n            <line\n              x1={0}\n              y1={0}\n              x2={0}\n              y2={chartHeight}\n              stroke=\"white\"\n              strokeWidth=\"1\"\n            />\n            \n            {/* Data lines */}\n            {filters.temperature && data.length > 0 && (\n              <path\n                d={generatePath(getDataPoints('temperature'))}\n                fill=\"none\"\n                stroke={CHART_CONFIG.colors.temperature}\n                strokeWidth=\"2\"\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n              />\n            )}\n            \n            {filters.humidity && data.length > 0 && (\n              <path\n                d={generatePath(getDataPoints('humidity'))}\n                fill=\"none\"\n                stroke={CHART_CONFIG.colors.humidity}\n                strokeWidth=\"2\"\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n              />\n            )}\n            \n            {filters.airQuality && data.length > 0 && (\n              <path\n                d={generatePath(getDataPoints('airQuality'))}\n                fill=\"none\"\n                stroke={CHART_CONFIG.colors.airQuality}\n                strokeWidth=\"2\"\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n              />\n            )}\n            \n            {/* Data points */}\n            {filters.temperature && data.map((point, i) => {\n              const points = getDataPoints('temperature');\n              if (!points[i]) return null;\n              return (\n                <circle\n                  key={`temp-${i}`}\n                  cx={points[i].x}\n                  cy={points[i].y}\n                  r={3}\n                  fill={CHART_CONFIG.colors.temperature}\n                  stroke=\"white\"\n                  strokeWidth=\"1\"\n                />\n              );\n            })}\n            \n            {/* Legend */}\n            <g transform={`translate(${chartWidth - 150}, 20)`}>\n              {filters.temperature && (\n                <g>\n                  <line x1={0} y1={5} x2={20} y2={5} stroke={CHART_CONFIG.colors.temperature} strokeWidth=\"2\" />\n                  <text x={30} y={9} fill=\"white\" fontSize=\"12\">Temperature (°C)</text>\n                </g>\n              )}\n              {filters.humidity && (\n                <g transform={`translate(0, ${filters.temperature ? 20 : 0})`}>\n                  <line x1={0} y1={5} x2={20} y2={5} stroke={CHART_CONFIG.colors.humidity} strokeWidth=\"2\" />\n                  <text x={30} y={9} fill=\"white\" fontSize=\"12\">Humidity (%)</text>\n                </g>\n              )}\n              {filters.airQuality && (\n                <g transform={`translate(0, ${(filters.temperature ? 20 : 0) + (filters.humidity ? 20 : 0)})`}>\n                  <line x1={0} y1={5} x2={20} y2={5} stroke={CHART_CONFIG.colors.airQuality} strokeWidth=\"2\" />\n                  <text x={30} y={9} fill=\"white\" fontSize=\"12\">Air Quality (AQI)</text>\n                </g>\n              )}\n            </g>\n          </g>\n          \n          {/* X-axis labels */}\n          <g transform={`translate(${CHART_CONFIG.margin.left}, ${dimensions.height - CHART_CONFIG.margin.bottom})`}>\n            {data.length > 0 && (\n              <text\n                x={chartWidth / 2}\n                y={30}\n                textAnchor=\"middle\"\n                fill=\"white\"\n                fontSize=\"12\"\n              >\n                Time\n              </text>\n            )}\n            \n            {data.length > 4 && (\n              <>\n                <text x={0} y={20} fill=\"white\" fontSize=\"10\" textAnchor=\"start\">\n                  {data[0]?.timestamp || ''}\n                </text>\n                <text x={chartWidth} y={20} fill=\"white\" fontSize=\"10\" textAnchor=\"end\">\n                  {data[data.length - 1]?.timestamp || ''}\n                </text>\n              </>\n            )}\n          </g>\n          \n          {/* Y-axis labels */}\n          <g transform={`translate(${CHART_CONFIG.margin.left}, ${CHART_CONFIG.margin.top})`}>\n            {data.length > 0 && (\n              <text\n                x={-30}\n                y={-10}\n                textAnchor=\"middle\"\n                fill=\"white\"\n                fontSize=\"12\"\n                transform=\"rotate(-90, -30, -10)\"\n              >\n                Value\n              </text>\n            )}\n            \n            {[0, 0.25, 0.5, 0.75, 1].map((t, i) => {\n              if (data.length === 0) return null;\n              const tempRange = getMinMax('temperature');\n              const value = Math.round(tempRange.min + (1 - t) * (tempRange.max - tempRange.min));\n              return (\n                <text\n                  key={`y-label-${i}`}\n                  x={-10}\n                  y={t * chartHeight + 3}\n                  textAnchor=\"end\"\n                  fill=\"white\"\n                  fontSize=\"10\"\n                >\n                  {value}\n                </text>\n              );\n            })}\n          </g>\n        </svg>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}