{"ast":null,"code":"import _objectSpread from\"/Users/pika/react-ecoboard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useEffect,useState,useCallback}from'react';import{Line}from'react-chartjs-2';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend}from'chart.js';import{SimulateRealTimeData}from'./SimulateRealTimeData.tsx';// Define the type for our sensor data\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend);//ensure to register for rendering\nexport default function SensorChart(){// State to track which charts are visible, used for \nconst[filters,setFilters]=useState({temperature:true,humidity:true,airQuality:true});const formatTime=function(){let date=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Date();return date.toLocaleTimeString('en-US',{hour12:false,hour:'2-digit',minute:'2-digit',second:'2-digit'});};const[chartData,setChartData]=useState({//this is the data that is displayed on the chart\nlabels:Array(10).fill('').map(()=>formatTime()),datasets:[{label:'Temperature (°C)',data:[],borderColor:'rgb(255, 99, 132)',// Dark blue color\ntension:0.1},{label:'Humidity (%)',data:[],borderColor:'rgb(255, 255, 255)',tension:0.1},{label:'Air Quality (AQI)',data:[],borderColor:'rgb(53, 162, 235)',tension:0.1}]});// Callback to handle updates from the simulator\nconst handleDataUpdate=useCallback(updates=>{// Update chart data with the latest readings\nif(updates.length>0){const latest=updates[updates.length-1];const now=new Date();setChartData(prev=>{// Add new time to labels, keeping only last 10 entries\nconst newLabels=[...prev.labels.slice(1),formatTime(now)];return _objectSpread(_objectSpread({},prev),{},{labels:newLabels,datasets:[_objectSpread(_objectSpread({},prev.datasets[0]),{},{data:[...prev.datasets[0].data.slice(-10),latest.temperature]//slice removed that last entry and keeps the most recent 10\n}),_objectSpread(_objectSpread({},prev.datasets[1]),{},{data:[...prev.datasets[1].data.slice(-10),latest.humidity]}),_objectSpread(_objectSpread({},prev.datasets[2]),{},{data:[...prev.datasets[2].data.slice(-10),latest.airQuality]})]});});}},[]);// Set up the data simulation when component mounts\nuseEffect(()=>{// Start simulation with 1 sensor, updating every 2 seconds\nconst cleanup=SimulateRealTimeData(1,1000,handleDataUpdate);// Clean up interval on unmount\nreturn()=>{cleanup&&cleanup();};},[handleDataUpdate]);//chart options for customizing the chart\nconst options={responsive:true,maintainAspectRatio:false,animation:{duration:1000},plugins:{legend:{labels:{color:'#e2e8f0',font:{size:14,weight:'normal'// Using 'normal' which is a valid font weight\n},padding:20,usePointStyle:true,pointStyle:'circle',boxWidth:8}}},scales:{x:{grid:{color:'rgba(255, 255, 255, 0.1)'},ticks:{color:'#94a3b8',font:{size:12}}},y:{beginAtZero:false,grid:{color:'rgba(255, 255, 255, 0.1)'},ticks:{color:'#94a3b8',font:{size:12}}}}};// Filter the chart data based on active filters\nconst filteredChartData=_objectSpread(_objectSpread({},chartData),{},{datasets:chartData.datasets.filter(dataset=>{//filters out the datasets that are not selected\nif(dataset.label.includes('Temperature')&&!filters.temperature)return false;if(dataset.label.includes('Humidity')&&!filters.humidity)return false;if(dataset.label.includes('Air Quality')&&!filters.airQuality)return false;return true;})});// Handle filter toggle\nconst handleFilterChange=filterName=>{setFilters(prev=>_objectSpread(_objectSpread({},prev),{},{[filterName]:!prev[filterName]}));};return(/*#__PURE__*///renders the chart with the toggles and the chart\n_jsxs(\"div\",{className:\"chart-container\",children:[/*#__PURE__*/_jsx(\"h1\",{style:{color:\"white\"},children:\"Real-time Sensor Data\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"chart-filters\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"filter-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"checkbox-wrapper-3\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",id:\"temperature-toggle\",checked:filters.temperature,onChange:()=>handleFilterChange('temperature')}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"temperature-toggle\",className:\"toggle\",children:/*#__PURE__*/_jsx(\"span\",{})})]}),/*#__PURE__*/_jsx(\"span\",{className:\"filter-label\",children:\"Temperature\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"checkbox-wrapper-3\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",id:\"humidity-toggle\",checked:filters.humidity,onChange:()=>handleFilterChange('humidity')}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"humidity-toggle\",className:\"toggle\",children:/*#__PURE__*/_jsx(\"span\",{})})]}),/*#__PURE__*/_jsx(\"span\",{className:\"filter-label\",children:\"Humidity\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"checkbox-wrapper-3\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",id:\"airquality-toggle\",checked:filters.airQuality,onChange:()=>handleFilterChange('airQuality')}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"airquality-toggle\",className:\"toggle\",children:/*#__PURE__*/_jsx(\"span\",{})})]}),/*#__PURE__*/_jsx(\"span\",{className:\"filter-label\",children:\"Air Quality\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-wrapper\",children:/*#__PURE__*/_jsx(Line,{data:filteredChartData,options:options})})]}));}","map":{"version":3,"names":["React","useEffect","useState","useCallback","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","SimulateRealTimeData","jsx","_jsx","jsxs","_jsxs","register","SensorChart","filters","setFilters","temperature","humidity","airQuality","formatTime","date","arguments","length","undefined","Date","toLocaleTimeString","hour12","hour","minute","second","chartData","setChartData","labels","Array","fill","map","datasets","label","data","borderColor","tension","handleDataUpdate","updates","latest","now","prev","newLabels","slice","_objectSpread","cleanup","options","responsive","maintainAspectRatio","animation","duration","plugins","legend","color","font","size","weight","padding","usePointStyle","pointStyle","boxWidth","scales","x","grid","ticks","y","beginAtZero","filteredChartData","filter","dataset","includes","handleFilterChange","filterName","className","children","style","type","id","checked","onChange","htmlFor"],"sources":["/Users/pika/react-ecoboard/src/Components/SensorChart.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { SimulateRealTimeData } from './SimulateRealTimeData.tsx';\n\n// Define the type for our sensor data\ninterface SensorData {\n  sensorId: string;\n  timestamp: string;\n  airQuality: number;\n  temperature: number;\n  humidity: number;\n}\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);  //ensure to register for rendering\n\nexport default function SensorChart() {\n    // State to track which charts are visible, used for \n    const [filters, setFilters] = useState({\n        temperature: true,\n        humidity: true,\n        airQuality: true\n    });\n\n    const formatTime = (date = new Date()) => {\n      return date.toLocaleTimeString('en-US', {\n        hour12: false,\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    };\n\n    const [chartData, setChartData] = useState({  //this is the data that is displayed on the chart\n      labels: Array(10).fill('').map(() => formatTime()),\n      datasets: [\n        {\n          label: 'Temperature (°C)',\n          data: [],\n          borderColor: 'rgb(255, 99, 132)', // Dark blue color\n          tension: 0.1\n        },\n        {\n          label: 'Humidity (%)',\n          data: [],\n          borderColor: 'rgb(255, 255, 255)',\n          tension: 0.1\n        },\n        {\n          label: 'Air Quality (AQI)',\n          data: [],\n          borderColor: 'rgb(53, 162, 235)',\n          tension: 0.1\n        }\n      ]\n    });\n\n    // Callback to handle updates from the simulator\n    const handleDataUpdate = useCallback((updates: SensorData[]) => {\n      // Update chart data with the latest readings\n      if (updates.length > 0) {\n        const latest = updates[updates.length - 1];\n        const now = new Date();\n        \n        setChartData(prev => {\n          // Add new time to labels, keeping only last 10 entries\n          const newLabels = [...prev.labels.slice(1), formatTime(now)];\n          \n          return {\n            ...prev,\n            labels: newLabels,\n            datasets: [\n              {\n                ...prev.datasets[0],\n                data: [...prev.datasets[0].data.slice(-10), latest.temperature]  //slice removed that last entry and keeps the most recent 10\n              },\n              {\n                ...prev.datasets[1],\n                data: [...prev.datasets[1].data.slice(-10), latest.humidity]\n              },\n              {\n                ...prev.datasets[2],\n                data: [...prev.datasets[2].data.slice(-10), latest.airQuality]\n              }\n            ]\n          };\n        });\n      }\n    }, []);\n\n    // Set up the data simulation when component mounts\n    useEffect(() => {\n      // Start simulation with 1 sensor, updating every 2 seconds\n      const cleanup = SimulateRealTimeData(1, 1000, handleDataUpdate);\n      \n      // Clean up interval on unmount\n      return () => {\n        cleanup && cleanup();\n      };\n    }, [handleDataUpdate]);\n\n    //chart options for customizing the chart\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      animation: {\n        duration: 1000\n      },\n      plugins: {\n        legend: {\n          labels: {\n            color: '#e2e8f0',\n            font: {\n              size: 14,\n              weight: 'normal' as const, // Using 'normal' which is a valid font weight\n            },\n            padding: 20,\n            usePointStyle: true,\n            pointStyle: 'circle',\n            boxWidth: 8,\n          }\n        }\n      },\n      scales: {\n        x: {\n          grid: {\n            color: 'rgba(255, 255, 255, 0.1)'\n          },\n          ticks: {\n            color: '#94a3b8',\n            font: {\n              size: 12\n            }\n          }\n        },\n        y: {\n          beginAtZero: false,\n          grid: {\n            color: 'rgba(255, 255, 255, 0.1)'\n          },\n          ticks: {\n            color: '#94a3b8',\n            font: {\n              size: 12\n            }\n          }\n        }\n      }\n    };\n\n    // Filter the chart data based on active filters\n    const filteredChartData = {\n        ...chartData,\n        datasets: chartData.datasets.filter(dataset => {\n          //filters out the datasets that are not selected\n            if (dataset.label.includes('Temperature') && !filters.temperature) return false;\n            if (dataset.label.includes('Humidity') && !filters.humidity) return false;\n            if (dataset.label.includes('Air Quality') && !filters.airQuality) return false;\n            return true;\n        })\n    };\n\n    // Handle filter toggle\n    const handleFilterChange = (filterName) => {\n        setFilters(prev => ({\n            ...prev,\n            [filterName]: !prev[filterName]\n        }));\n    };\n\n    return (  //renders the chart with the toggles and the chart\n        <div className=\"chart-container\">\n            <h1 style={{ color: \"white\" }}>Real-time Sensor Data</h1>\n            <div className=\"chart-filters\">\n                <div className=\"filter-item\">\n                    <div className=\"checkbox-wrapper-3\">\n                        <input \n                            type=\"checkbox\" \n                            id=\"temperature-toggle\" \n                            checked={filters.temperature}\n                            onChange={() => handleFilterChange('temperature')}\n                        />\n                        <label htmlFor=\"temperature-toggle\" className=\"toggle\">\n                            <span></span>\n                        </label>\n                    </div>\n                    <span className=\"filter-label\">Temperature</span>\n                </div>\n                <div className=\"filter-item\">\n                    <div className=\"checkbox-wrapper-3\">\n                        <input \n                            type=\"checkbox\" \n                            id=\"humidity-toggle\"\n                            checked={filters.humidity}\n                            onChange={() => handleFilterChange('humidity')}\n                        />\n                        <label htmlFor=\"humidity-toggle\" className=\"toggle\">\n                            <span></span>\n                        </label>\n                    </div>\n                    <span className=\"filter-label\">Humidity</span>\n                </div>\n                <div className=\"filter-item\">\n                    <div className=\"checkbox-wrapper-3\">\n                        <input \n                            type=\"checkbox\" \n                            id=\"airquality-toggle\"\n                            checked={filters.airQuality}\n                            onChange={() => handleFilterChange('airQuality')}\n                        />\n                        <label htmlFor=\"airquality-toggle\" className=\"toggle\">\n                            <span></span>\n                        </label>\n                    </div>\n                    <span className=\"filter-label\">Air Quality</span>\n                </div>\n            </div>\n            <div className=\"chart-wrapper\">\n                <Line data={filteredChartData} options={options} />\n            </div>\n        </div>\n    );\n}"],"mappings":"+GAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,CAAEC,WAAW,KAAQ,OAAO,CAC/D,OAASC,IAAI,KAAQ,iBAAiB,CACtC,OAASC,KAAK,GAAI,CAAAC,OAAO,CAAEC,aAAa,CAAEC,WAAW,CAAEC,YAAY,CAAEC,WAAW,CAAEC,KAAK,CAAEC,OAAO,CAAEC,MAAM,KAAQ,UAAU,CAC1H,OAASC,oBAAoB,KAAQ,4BAA4B,CAEjE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBASAZ,OAAO,CAACa,QAAQ,CAACZ,aAAa,CAAEC,WAAW,CAAEC,YAAY,CAAEC,WAAW,CAAEC,KAAK,CAAEC,OAAO,CAAEC,MAAM,CAAC,CAAG;AAElG,cAAe,SAAS,CAAAO,WAAWA,CAAA,CAAG,CAClC;AACA,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGpB,QAAQ,CAAC,CACnCqB,WAAW,CAAE,IAAI,CACjBC,QAAQ,CAAE,IAAI,CACdC,UAAU,CAAE,IAChB,CAAC,CAAC,CAEF,KAAM,CAAAC,UAAU,CAAG,QAAAA,CAAA,CAAuB,IAAtB,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,GAAI,CAAAG,IAAI,CAAC,CAAC,CACnC,MAAO,CAAAJ,IAAI,CAACK,kBAAkB,CAAC,OAAO,CAAE,CACtCC,MAAM,CAAE,KAAK,CACbC,IAAI,CAAE,SAAS,CACfC,MAAM,CAAE,SAAS,CACjBC,MAAM,CAAE,SACV,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGpC,QAAQ,CAAC,CAAG;AAC5CqC,MAAM,CAAEC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,IAAMhB,UAAU,CAAC,CAAC,CAAC,CAClDiB,QAAQ,CAAE,CACR,CACEC,KAAK,CAAE,kBAAkB,CACzBC,IAAI,CAAE,EAAE,CACRC,WAAW,CAAE,mBAAmB,CAAE;AAClCC,OAAO,CAAE,GACX,CAAC,CACD,CACEH,KAAK,CAAE,cAAc,CACrBC,IAAI,CAAE,EAAE,CACRC,WAAW,CAAE,oBAAoB,CACjCC,OAAO,CAAE,GACX,CAAC,CACD,CACEH,KAAK,CAAE,mBAAmB,CAC1BC,IAAI,CAAE,EAAE,CACRC,WAAW,CAAE,mBAAmB,CAChCC,OAAO,CAAE,GACX,CAAC,CAEL,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,gBAAgB,CAAG7C,WAAW,CAAE8C,OAAqB,EAAK,CAC9D;AACA,GAAIA,OAAO,CAACpB,MAAM,CAAG,CAAC,CAAE,CACtB,KAAM,CAAAqB,MAAM,CAAGD,OAAO,CAACA,OAAO,CAACpB,MAAM,CAAG,CAAC,CAAC,CAC1C,KAAM,CAAAsB,GAAG,CAAG,GAAI,CAAApB,IAAI,CAAC,CAAC,CAEtBO,YAAY,CAACc,IAAI,EAAI,CACnB;AACA,KAAM,CAAAC,SAAS,CAAG,CAAC,GAAGD,IAAI,CAACb,MAAM,CAACe,KAAK,CAAC,CAAC,CAAC,CAAE5B,UAAU,CAACyB,GAAG,CAAC,CAAC,CAE5D,OAAAI,aAAA,CAAAA,aAAA,IACKH,IAAI,MACPb,MAAM,CAAEc,SAAS,CACjBV,QAAQ,CAAE,CAAAY,aAAA,CAAAA,aAAA,IAEHH,IAAI,CAACT,QAAQ,CAAC,CAAC,CAAC,MACnBE,IAAI,CAAE,CAAC,GAAGO,IAAI,CAACT,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAEJ,MAAM,CAAC3B,WAAW,CAAG;AAAA,GAAAgC,aAAA,CAAAA,aAAA,IAG9DH,IAAI,CAACT,QAAQ,CAAC,CAAC,CAAC,MACnBE,IAAI,CAAE,CAAC,GAAGO,IAAI,CAACT,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAEJ,MAAM,CAAC1B,QAAQ,CAAC,GAAA+B,aAAA,CAAAA,aAAA,IAGzDH,IAAI,CAACT,QAAQ,CAAC,CAAC,CAAC,MACnBE,IAAI,CAAE,CAAC,GAAGO,IAAI,CAACT,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAEJ,MAAM,CAACzB,UAAU,CAAC,GAEjE,GAEL,CAAC,CAAC,CACJ,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACAxB,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAuD,OAAO,CAAG1C,oBAAoB,CAAC,CAAC,CAAE,IAAI,CAAEkC,gBAAgB,CAAC,CAE/D;AACA,MAAO,IAAM,CACXQ,OAAO,EAAIA,OAAO,CAAC,CAAC,CACtB,CAAC,CACH,CAAC,CAAE,CAACR,gBAAgB,CAAC,CAAC,CAEtB;AACA,KAAM,CAAAS,OAAO,CAAG,CACdC,UAAU,CAAE,IAAI,CAChBC,mBAAmB,CAAE,KAAK,CAC1BC,SAAS,CAAE,CACTC,QAAQ,CAAE,IACZ,CAAC,CACDC,OAAO,CAAE,CACPC,MAAM,CAAE,CACNxB,MAAM,CAAE,CACNyB,KAAK,CAAE,SAAS,CAChBC,IAAI,CAAE,CACJC,IAAI,CAAE,EAAE,CACRC,MAAM,CAAE,QAAmB;AAC7B,CAAC,CACDC,OAAO,CAAE,EAAE,CACXC,aAAa,CAAE,IAAI,CACnBC,UAAU,CAAE,QAAQ,CACpBC,QAAQ,CAAE,CACZ,CACF,CACF,CAAC,CACDC,MAAM,CAAE,CACNC,CAAC,CAAE,CACDC,IAAI,CAAE,CACJV,KAAK,CAAE,0BACT,CAAC,CACDW,KAAK,CAAE,CACLX,KAAK,CAAE,SAAS,CAChBC,IAAI,CAAE,CACJC,IAAI,CAAE,EACR,CACF,CACF,CAAC,CACDU,CAAC,CAAE,CACDC,WAAW,CAAE,KAAK,CAClBH,IAAI,CAAE,CACJV,KAAK,CAAE,0BACT,CAAC,CACDW,KAAK,CAAE,CACLX,KAAK,CAAE,SAAS,CAChBC,IAAI,CAAE,CACJC,IAAI,CAAE,EACR,CACF,CACF,CACF,CACF,CAAC,CAED;AACA,KAAM,CAAAY,iBAAiB,CAAAvB,aAAA,CAAAA,aAAA,IAChBlB,SAAS,MACZM,QAAQ,CAAEN,SAAS,CAACM,QAAQ,CAACoC,MAAM,CAACC,OAAO,EAAI,CAC7C;AACE,GAAIA,OAAO,CAACpC,KAAK,CAACqC,QAAQ,CAAC,aAAa,CAAC,EAAI,CAAC5D,OAAO,CAACE,WAAW,CAAE,MAAO,MAAK,CAC/E,GAAIyD,OAAO,CAACpC,KAAK,CAACqC,QAAQ,CAAC,UAAU,CAAC,EAAI,CAAC5D,OAAO,CAACG,QAAQ,CAAE,MAAO,MAAK,CACzE,GAAIwD,OAAO,CAACpC,KAAK,CAACqC,QAAQ,CAAC,aAAa,CAAC,EAAI,CAAC5D,OAAO,CAACI,UAAU,CAAE,MAAO,MAAK,CAC9E,MAAO,KAAI,CACf,CAAC,CAAC,EACL,CAED;AACA,KAAM,CAAAyD,kBAAkB,CAAIC,UAAU,EAAK,CACvC7D,UAAU,CAAC8B,IAAI,EAAAG,aAAA,CAAAA,aAAA,IACRH,IAAI,MACP,CAAC+B,UAAU,EAAG,CAAC/B,IAAI,CAAC+B,UAAU,CAAC,EACjC,CAAC,CACP,CAAC,CAED,oBAAU;AACNjE,KAAA,QAAKkE,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC5BrE,IAAA,OAAIsE,KAAK,CAAE,CAAEtB,KAAK,CAAE,OAAQ,CAAE,CAAAqB,QAAA,CAAC,uBAAqB,CAAI,CAAC,cACzDnE,KAAA,QAAKkE,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC1BnE,KAAA,QAAKkE,SAAS,CAAC,aAAa,CAAAC,QAAA,eACxBnE,KAAA,QAAKkE,SAAS,CAAC,oBAAoB,CAAAC,QAAA,eAC/BrE,IAAA,UACIuE,IAAI,CAAC,UAAU,CACfC,EAAE,CAAC,oBAAoB,CACvBC,OAAO,CAAEpE,OAAO,CAACE,WAAY,CAC7BmE,QAAQ,CAAEA,CAAA,GAAMR,kBAAkB,CAAC,aAAa,CAAE,CACrD,CAAC,cACFlE,IAAA,UAAO2E,OAAO,CAAC,oBAAoB,CAACP,SAAS,CAAC,QAAQ,CAAAC,QAAA,cAClDrE,IAAA,UAAY,CAAC,CACV,CAAC,EACP,CAAC,cACNA,IAAA,SAAMoE,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,aAAW,CAAM,CAAC,EAChD,CAAC,cACNnE,KAAA,QAAKkE,SAAS,CAAC,aAAa,CAAAC,QAAA,eACxBnE,KAAA,QAAKkE,SAAS,CAAC,oBAAoB,CAAAC,QAAA,eAC/BrE,IAAA,UACIuE,IAAI,CAAC,UAAU,CACfC,EAAE,CAAC,iBAAiB,CACpBC,OAAO,CAAEpE,OAAO,CAACG,QAAS,CAC1BkE,QAAQ,CAAEA,CAAA,GAAMR,kBAAkB,CAAC,UAAU,CAAE,CAClD,CAAC,cACFlE,IAAA,UAAO2E,OAAO,CAAC,iBAAiB,CAACP,SAAS,CAAC,QAAQ,CAAAC,QAAA,cAC/CrE,IAAA,UAAY,CAAC,CACV,CAAC,EACP,CAAC,cACNA,IAAA,SAAMoE,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,UAAQ,CAAM,CAAC,EAC7C,CAAC,cACNnE,KAAA,QAAKkE,SAAS,CAAC,aAAa,CAAAC,QAAA,eACxBnE,KAAA,QAAKkE,SAAS,CAAC,oBAAoB,CAAAC,QAAA,eAC/BrE,IAAA,UACIuE,IAAI,CAAC,UAAU,CACfC,EAAE,CAAC,mBAAmB,CACtBC,OAAO,CAAEpE,OAAO,CAACI,UAAW,CAC5BiE,QAAQ,CAAEA,CAAA,GAAMR,kBAAkB,CAAC,YAAY,CAAE,CACpD,CAAC,cACFlE,IAAA,UAAO2E,OAAO,CAAC,mBAAmB,CAACP,SAAS,CAAC,QAAQ,CAAAC,QAAA,cACjDrE,IAAA,UAAY,CAAC,CACV,CAAC,EACP,CAAC,cACNA,IAAA,SAAMoE,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,aAAW,CAAM,CAAC,EAChD,CAAC,EACL,CAAC,cACNrE,IAAA,QAAKoE,SAAS,CAAC,eAAe,CAAAC,QAAA,cAC1BrE,IAAA,CAACZ,IAAI,EAACyC,IAAI,CAAEiC,iBAAkB,CAACrB,OAAO,CAAEA,OAAQ,CAAE,CAAC,CAClD,CAAC,EACL,CAAC,EAEd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}