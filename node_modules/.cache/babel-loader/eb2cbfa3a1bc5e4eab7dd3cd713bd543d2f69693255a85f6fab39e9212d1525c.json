{"ast":null,"code":"var _jsxFileName = \"/Users/pika/react-ecoboard/react-ecoboard/src/Components/SensorChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { SimulateRealTimeData } from './SimulateRealTimeData.tsx';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst SensorChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Air Quality (AQI)',\n      data: [],\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }, {\n      label: 'Temperature (°C)',\n      data: [],\n      borderColor: 'rgb(255, 99, 132)',\n      tension: 0.1\n    }, {\n      label: 'Humidity (% RH)',\n      data: [],\n      borderColor: 'rgb(54, 162, 235)',\n      tension: 0.1\n    }]\n  });\n  const maxDataPoints = 10; // Number of data points to show on the chart\n\n  useEffect(() => {\n    const updateChart = sensorData => {\n      if (sensorData.length === 0) return;\n\n      // Get the first sensor's data (or you can modify to show multiple sensors)\n      const data = sensorData[0];\n      const time = new Date(data.timestamp).toLocaleTimeString();\n      setChartData(prevData => {\n        const newLabels = [...prevData.labels, time].slice(-maxDataPoints);\n        const newAirQuality = [...prevData.datasets[0].data, data.airQuality].slice(-maxDataPoints);\n        const newTemperature = [...prevData.datasets[1].data, data.temperature].slice(-maxDataPoints);\n        const newHumidity = [...prevData.datasets[2].data, data.humidity].slice(-maxDataPoints);\n        return {\n          labels: newLabels,\n          datasets: [{\n            ...prevData.datasets[0],\n            data: newAirQuality\n          }, {\n            ...prevData.datasets[1],\n            data: newTemperature\n          }, {\n            ...prevData.datasets[2],\n            data: newHumidity\n          }]\n        };\n      });\n    };\n\n    // Start the simulation with 1 sensor, updating every 2 seconds\n    const cleanup = SimulateRealTimeData(1, 2000, updateChart);\n\n    // Cleanup on component unmount\n    return () => {\n      if (cleanup) cleanup();\n    };\n  }, []);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Sensor Data Over Time'\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: false\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '80%',\n      margin: '0 auto',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Real-time Sensor Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(SensorChart, \"cwA69t+cX5DooeFvOMTDZnhi+r4=\");\n_c = SensorChart;\nexport default SensorChart;\nvar _c;\n$RefreshReg$(_c, \"SensorChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","SimulateRealTimeData","jsxDEV","_jsxDEV","register","SensorChart","_s","chartData","setChartData","labels","datasets","label","data","borderColor","tension","maxDataPoints","updateChart","sensorData","length","time","Date","timestamp","toLocaleTimeString","prevData","newLabels","slice","newAirQuality","airQuality","newTemperature","temperature","newHumidity","humidity","cleanup","options","responsive","plugins","legend","position","title","display","text","scales","y","beginAtZero","style","width","margin","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pika/react-ecoboard/react-ecoboard/src/Components/SensorChart.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { SimulateRealTimeData } from './SimulateRealTimeData.tsx';\n\n// Register ChartJS components\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst SensorChart = () => {\n  const [chartData, setChartData] = useState({\n    labels: [] as string[],\n    datasets: [\n      {\n        label: 'Air Quality (AQI)',\n        data: [] as number[],\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1,\n      },\n      {\n        label: 'Temperature (°C)',\n        data: [] as number[],\n        borderColor: 'rgb(255, 99, 132)',\n        tension: 0.1,\n      },\n      {\n        label: 'Humidity (% RH)',\n        data: [] as number[],\n        borderColor: 'rgb(54, 162, 235)',\n        tension: 0.1,\n      },\n    ],\n  });\n\n  const maxDataPoints = 10; // Number of data points to show on the chart\n\n  useEffect(() => {\n    const updateChart = (sensorData: any[]) => {\n      if (sensorData.length === 0) return;\n\n      // Get the first sensor's data (or you can modify to show multiple sensors)\n      const data = sensorData[0];\n      const time = new Date(data.timestamp).toLocaleTimeString();\n      \n      setChartData(prevData => {\n        const newLabels = [...prevData.labels, time].slice(-maxDataPoints);\n        const newAirQuality = [...prevData.datasets[0].data, data.airQuality].slice(-maxDataPoints);\n        const newTemperature = [...prevData.datasets[1].data, data.temperature].slice(-maxDataPoints);\n        const newHumidity = [...prevData.datasets[2].data, data.humidity].slice(-maxDataPoints);\n\n        return {\n          labels: newLabels,\n          datasets: [\n            { ...prevData.datasets[0], data: newAirQuality },\n            { ...prevData.datasets[1], data: newTemperature },\n            { ...prevData.datasets[2], data: newHumidity },\n          ],\n        };\n      });\n    };\n\n    // Start the simulation with 1 sensor, updating every 2 seconds\n    const cleanup = SimulateRealTimeData(1, 2000, updateChart);\n\n    // Cleanup on component unmount\n    return () => {\n      if (cleanup) cleanup();\n    };\n  }, []);\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: 'Sensor Data Over Time',\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: false,\n      },\n    },\n  };\n\n  return (\n    <div style={{ width: '80%', margin: '0 auto', padding: '20px' }}>\n      <h2>Real-time Sensor Data</h2>\n      <Line data={chartData} options={options} />\n    </div>\n  );\n};\n\nexport default SensorChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}