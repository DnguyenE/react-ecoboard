{"ast":null,"code":"var _jsxFileName = \"/Users/pika/react-ecoboard/react-ecoboard/src/Components/SensorChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { SimulateRealTimeData } from './SimulateRealTimeData.tsx';\n\n// Define the type for our sensor data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend); //ensure to register for rendering\n\nexport default function SensorChart() {\n  _s();\n  const [sensorData, setSensorData] = useState([]);\n  const formatTime = (date = new Date()) => {\n    return date.toLocaleTimeString('en-US', {\n      hour12: false,\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n  const [chartData, setChartData] = useState({\n    //this is the data that is displayed on the chart\n    labels: Array(7).fill('').map(() => formatTime()),\n    datasets: [{\n      label: 'Temperature (°C)',\n      data: [],\n      borderColor: 'rgb(0, 0, 139)',\n      // Dark blue color\n      tension: 0.1\n    }, {\n      label: 'Humidity (%)',\n      data: [],\n      borderColor: 'rgb(255, 99, 132)',\n      tension: 0.1\n    }, {\n      label: 'Air Quality (AQI)',\n      data: [],\n      borderColor: 'rgb(53, 162, 235)',\n      tension: 0.1\n    }]\n  });\n\n  // Callback to handle updates from the simulator\n  const handleDataUpdate = useCallback(updates => {\n    setSensorData(prev => [...prev, ...updates].slice(-20)); // Keep last 20 updates\n\n    // Update chart data with the latest readings\n    if (updates.length > 0) {\n      const latest = updates[updates.length - 1];\n      const now = new Date();\n      setChartData(prev => {\n        // Add new time to labels, keeping only last 7 entries\n        const newLabels = [...prev.labels.slice(1), formatTime(now)];\n        return {\n          ...prev,\n          labels: newLabels,\n          datasets: [{\n            ...prev.datasets[0],\n            data: [...prev.datasets[0].data.slice(-6), latest.temperature]\n          }, {\n            ...prev.datasets[1],\n            data: [...prev.datasets[1].data.slice(-6), latest.humidity]\n          }, {\n            ...prev.datasets[2],\n            data: [...prev.datasets[2].data.slice(-6), latest.airQuality]\n          }]\n        };\n      });\n    }\n  }, []);\n\n  // Set up the data simulation when component mounts\n  useEffect(() => {\n    // Start simulation with 1 sensor, updating every 2 seconds\n    const cleanup = SimulateRealTimeData(1, 2000, handleDataUpdate);\n\n    // Clean up interval on unmount\n    return () => {\n      cleanup && cleanup();\n    };\n  }, [handleDataUpdate]);\n  const options = {\n    responsive: true,\n    animation: {\n      duration: 1000\n    },\n    scales: {\n      y: {\n        beginAtZero: false\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: \"black\"\n      },\n      children: \"Real-time Sensor Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n}\n_s(SensorChart, \"ox00kPJmDv4ZB0WTkfWrBGhaMSg=\");\n_c = SensorChart;\nvar _c;\n$RefreshReg$(_c, \"SensorChart\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","SimulateRealTimeData","jsxDEV","_jsxDEV","register","SensorChart","_s","sensorData","setSensorData","formatTime","date","Date","toLocaleTimeString","hour12","hour","minute","second","chartData","setChartData","labels","Array","fill","map","datasets","label","data","borderColor","tension","handleDataUpdate","updates","prev","slice","length","latest","now","newLabels","temperature","humidity","airQuality","cleanup","options","responsive","animation","duration","scales","y","beginAtZero","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pika/react-ecoboard/react-ecoboard/src/Components/SensorChart.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { SimulateRealTimeData } from './SimulateRealTimeData.tsx';\n\n// Define the type for our sensor data\ninterface SensorData {\n  sensorId: string;\n  timestamp: string;\n  airQuality: number;\n  temperature: number;\n  humidity: number;\n}\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);  //ensure to register for rendering\n\nexport default function SensorChart() {\n\n    const [sensorData, setSensorData] = useState<SensorData[]>([]);\n    const formatTime = (date = new Date()) => {\n      return date.toLocaleTimeString('en-US', {\n        hour12: false,\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    };\n\n    const [chartData, setChartData] = useState({  //this is the data that is displayed on the chart\n      labels: Array(7).fill('').map(() => formatTime()),\n      datasets: [\n        {\n          label: 'Temperature (°C)',\n          data: [],\n          borderColor: 'rgb(0, 0, 139)', // Dark blue color\n          tension: 0.1\n        },\n        {\n          label: 'Humidity (%)',\n          data: [],\n          borderColor: 'rgb(255, 99, 132)',\n          tension: 0.1\n        },\n        {\n          label: 'Air Quality (AQI)',\n          data: [],\n          borderColor: 'rgb(53, 162, 235)',\n          tension: 0.1\n        }\n      ]\n    });\n\n    // Callback to handle updates from the simulator\n    const handleDataUpdate = useCallback((updates: SensorData[]) => {\n      setSensorData(prev => [...prev, ...updates].slice(-20)); // Keep last 20 updates\n      \n      // Update chart data with the latest readings\n      if (updates.length > 0) {\n        const latest = updates[updates.length - 1];\n        const now = new Date();\n        \n        setChartData(prev => {\n          // Add new time to labels, keeping only last 7 entries\n          const newLabels = [...prev.labels.slice(1), formatTime(now)];\n          \n          return {\n            ...prev,\n            labels: newLabels,\n            datasets: [\n              {\n                ...prev.datasets[0],\n                data: [...prev.datasets[0].data.slice(-6), latest.temperature]\n              },\n              {\n                ...prev.datasets[1],\n                data: [...prev.datasets[1].data.slice(-6), latest.humidity]\n              },\n              {\n                ...prev.datasets[2],\n                data: [...prev.datasets[2].data.slice(-6), latest.airQuality]\n              }\n            ]\n          };\n        });\n      }\n    }, []);\n\n    // Set up the data simulation when component mounts\n    useEffect(() => {\n      // Start simulation with 1 sensor, updating every 2 seconds\n      const cleanup = SimulateRealTimeData(1, 2000, handleDataUpdate);\n      \n      // Clean up interval on unmount\n      return () => {\n        cleanup && cleanup();\n      };\n    }, [handleDataUpdate]);\n\n    const options = {\n      responsive: true,\n      animation: {\n        duration: 1000\n      },\n      scales: {\n        y: {\n          beginAtZero: false\n        }\n      }\n    };\n\n    return (\n        <div>\n            <h1 style={{ color: \"black\" }}>Real-time Sensor Data</h1>\n            <Line data={chartData} options={options} />\n        </div>\n    );\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}