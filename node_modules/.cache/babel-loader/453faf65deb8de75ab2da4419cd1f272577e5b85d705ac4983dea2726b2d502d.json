{"ast":null,"code":"var _jsxFileName = \"/Users/pika/react-ecoboard/react-ecoboard/src/Components/SensorChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { SimulateRealTimeData } from './SimulateRealTimeData.tsx';\n\n// Define the type for our sensor data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend); //ensure to register for rendering\n\nexport default function SensorChart() {\n  _s();\n  // State to track which charts are visible\n  const [filters, setFilters] = useState({\n    temperature: true,\n    humidity: true,\n    airQuality: true\n  });\n  const [sensorData, setSensorData] = useState([]);\n  const formatTime = (date = new Date()) => {\n    return date.toLocaleTimeString('en-US', {\n      hour12: false,\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n  const [chartData, setChartData] = useState({\n    //this is the data that is displayed on the chart\n    labels: Array(7).fill('').map(() => formatTime()),\n    datasets: [{\n      label: 'Temperature (Â°C)',\n      data: [],\n      borderColor: 'rgb(0, 0, 139)',\n      // Dark blue color\n      tension: 0.1\n    }, {\n      label: 'Humidity (%)',\n      data: [],\n      borderColor: 'rgb(255, 99, 132)',\n      tension: 0.1\n    }, {\n      label: 'Air Quality (AQI)',\n      data: [],\n      borderColor: 'rgb(53, 162, 235)',\n      tension: 0.1\n    }]\n  });\n\n  // Callback to handle updates from the simulator\n  const handleDataUpdate = useCallback(updates => {\n    setSensorData(prev => [...prev, ...updates].slice(-20)); // Keep last 20 updates\n\n    // Update chart data with the latest readings\n    if (updates.length > 0) {\n      const latest = updates[updates.length - 1];\n      const now = new Date();\n      setChartData(prev => {\n        // Add new time to labels, keeping only last 7 entries\n        const newLabels = [...prev.labels.slice(1), formatTime(now)];\n        return {\n          ...prev,\n          labels: newLabels,\n          datasets: [{\n            ...prev.datasets[0],\n            data: [...prev.datasets[0].data.slice(-6), latest.temperature]\n          }, {\n            ...prev.datasets[1],\n            data: [...prev.datasets[1].data.slice(-6), latest.humidity]\n          }, {\n            ...prev.datasets[2],\n            data: [...prev.datasets[2].data.slice(-6), latest.airQuality]\n          }]\n        };\n      });\n    }\n  }, []);\n\n  // Set up the data simulation when component mounts\n  useEffect(() => {\n    // Start simulation with 1 sensor, updating every 2 seconds\n    const cleanup = SimulateRealTimeData(1, 2000, handleDataUpdate);\n\n    // Clean up interval on unmount\n    return () => {\n      cleanup && cleanup();\n    };\n  }, [handleDataUpdate]);\n  const options = {\n    responsive: true,\n    animation: {\n      duration: 500\n    },\n    scales: {\n      y: {\n        beginAtZero: false\n      }\n    }\n  };\n\n  // Filter the chart data based on active filters\n  const filteredChartData = {\n    ...chartData,\n    datasets: chartData.datasets.filter(dataset => {\n      if (dataset.label.includes('Temperature') && !filters.temperature) return false;\n      if (dataset.label.includes('Humidity') && !filters.humidity) return false;\n      if (dataset.label.includes('Air Quality') && !filters.airQuality) return false;\n      return true;\n    })\n  };\n\n  // Handle filter toggle\n  const handleFilterChange = filterName => {\n    setFilters(prev => ({\n      ...prev,\n      [filterName]: !prev[filterName]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: \"white\"\n      },\n      children: \"Real-time Sensor Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-filters\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkbox-wrapper-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: \"temperature-toggle\",\n            checked: filters.temperature,\n            onChange: () => handleFilterChange('temperature')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"temperature-toggle\",\n            className: \"toggle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"filter-label\",\n          children: \"Temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkbox-wrapper-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: \"humidity-toggle\",\n            checked: filters.humidity,\n            onChange: () => handleFilterChange('humidity')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"humidity-toggle\",\n            className: \"toggle\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"filter-label\",\n          children: \"Humidity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkbox-wrapper-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: \"airquality-toggle\",\n            checked: filters.airQuality,\n            onChange: () => handleFilterChange('airQuality')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"airquality-toggle\",\n            className: \"toggle\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"filter-label\",\n          children: \"Air Quality\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: filteredChartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n_s(SensorChart, \"MpQ1sw1T2E1VBXTF5BFWQIBwqps=\");\n_c = SensorChart;\nvar _c;\n$RefreshReg$(_c, \"SensorChart\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","SimulateRealTimeData","jsxDEV","_jsxDEV","register","SensorChart","_s","filters","setFilters","temperature","humidity","airQuality","sensorData","setSensorData","formatTime","date","Date","toLocaleTimeString","hour12","hour","minute","second","chartData","setChartData","labels","Array","fill","map","datasets","label","data","borderColor","tension","handleDataUpdate","updates","prev","slice","length","latest","now","newLabels","cleanup","options","responsive","animation","duration","scales","y","beginAtZero","filteredChartData","filter","dataset","includes","handleFilterChange","filterName","className","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","type","id","checked","onChange","htmlFor","_c","$RefreshReg$"],"sources":["/Users/pika/react-ecoboard/react-ecoboard/src/Components/SensorChart.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { SimulateRealTimeData } from './SimulateRealTimeData.tsx';\n\n// Define the type for our sensor data\ninterface SensorData {\n  sensorId: string;\n  timestamp: string;\n  airQuality: number;\n  temperature: number;\n  humidity: number;\n}\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);  //ensure to register for rendering\n\nexport default function SensorChart() {\n    // State to track which charts are visible\n    const [filters, setFilters] = useState({\n        temperature: true,\n        humidity: true,\n        airQuality: true\n    });\n\n    const [sensorData, setSensorData] = useState<SensorData[]>([]);\n    const formatTime = (date = new Date()) => {\n      return date.toLocaleTimeString('en-US', {\n        hour12: false,\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    };\n\n    const [chartData, setChartData] = useState({  //this is the data that is displayed on the chart\n      labels: Array(7).fill('').map(() => formatTime()),\n      datasets: [\n        {\n          label: 'Temperature (Â°C)',\n          data: [],\n          borderColor: 'rgb(0, 0, 139)', // Dark blue color\n          tension: 0.1\n        },\n        {\n          label: 'Humidity (%)',\n          data: [],\n          borderColor: 'rgb(255, 99, 132)',\n          tension: 0.1\n        },\n        {\n          label: 'Air Quality (AQI)',\n          data: [],\n          borderColor: 'rgb(53, 162, 235)',\n          tension: 0.1\n        }\n      ]\n    });\n\n    // Callback to handle updates from the simulator\n    const handleDataUpdate = useCallback((updates: SensorData[]) => {\n      setSensorData(prev => [...prev, ...updates].slice(-20)); // Keep last 20 updates\n      \n      // Update chart data with the latest readings\n      if (updates.length > 0) {\n        const latest = updates[updates.length - 1];\n        const now = new Date();\n        \n        setChartData(prev => {\n          // Add new time to labels, keeping only last 7 entries\n          const newLabels = [...prev.labels.slice(1), formatTime(now)];\n          \n          return {\n            ...prev,\n            labels: newLabels,\n            datasets: [\n              {\n                ...prev.datasets[0],\n                data: [...prev.datasets[0].data.slice(-6), latest.temperature]\n              },\n              {\n                ...prev.datasets[1],\n                data: [...prev.datasets[1].data.slice(-6), latest.humidity]\n              },\n              {\n                ...prev.datasets[2],\n                data: [...prev.datasets[2].data.slice(-6), latest.airQuality]\n              }\n            ]\n          };\n        });\n      }\n    }, []);\n\n    // Set up the data simulation when component mounts\n    useEffect(() => {\n      // Start simulation with 1 sensor, updating every 2 seconds\n      const cleanup = SimulateRealTimeData(1, 2000, handleDataUpdate);\n      \n      // Clean up interval on unmount\n      return () => {\n        cleanup && cleanup();\n      };\n    }, [handleDataUpdate]);\n\n    const options = {\n      responsive: true,\n      animation: {\n        duration: 500\n      },\n      scales: {\n        y: {\n          beginAtZero: false\n        }\n      }\n    };\n\n    // Filter the chart data based on active filters\n    const filteredChartData = {\n        ...chartData,\n        datasets: chartData.datasets.filter(dataset => {\n            if (dataset.label.includes('Temperature') && !filters.temperature) return false;\n            if (dataset.label.includes('Humidity') && !filters.humidity) return false;\n            if (dataset.label.includes('Air Quality') && !filters.airQuality) return false;\n            return true;\n        })\n    };\n\n    // Handle filter toggle\n    const handleFilterChange = (filterName) => {\n        setFilters(prev => ({\n            ...prev,\n            [filterName]: !prev[filterName]\n        }));\n    };\n\n    return (\n        <div className=\"chart-container\">\n            <h1 style={{ color: \"white\" }}>Real-time Sensor Data</h1>\n            <div className=\"chart-filters\">\n                <div className=\"filter-item\">\n                    <div className=\"checkbox-wrapper-3\">\n                        <input \n                            type=\"checkbox\" \n                            id=\"temperature-toggle\" \n                            checked={filters.temperature}\n                            onChange={() => handleFilterChange('temperature')}\n                        />\n                        <label htmlFor=\"temperature-toggle\" className=\"toggle\">\n                            \n                        </label>\n                    </div>\n                    <span className=\"filter-label\">Temperature</span>\n                </div>\n                <div className=\"filter-item\">\n                    <div className=\"checkbox-wrapper-3\">\n                        <input \n                            type=\"checkbox\" \n                            id=\"humidity-toggle\"\n                            checked={filters.humidity}\n                            onChange={() => handleFilterChange('humidity')}\n                        />\n                        <label htmlFor=\"humidity-toggle\" className=\"toggle\">\n                            <span></span>\n                        </label>\n                    </div>\n                    <span className=\"filter-label\">Humidity</span>\n                </div>\n                <div className=\"filter-item\">\n                    <div className=\"checkbox-wrapper-3\">\n                        <input \n                            type=\"checkbox\" \n                            id=\"airquality-toggle\"\n                            checked={filters.airQuality}\n                            onChange={() => handleFilterChange('airQuality')}\n                        />\n                        <label htmlFor=\"airquality-toggle\" className=\"toggle\">\n                            <span></span>\n                        </label>\n                    </div>\n                    <span className=\"filter-label\">Air Quality</span>\n                </div>\n            </div>\n            <Line data={filteredChartData} options={options} />\n        </div>\n    );\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}